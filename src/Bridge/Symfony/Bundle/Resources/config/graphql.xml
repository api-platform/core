<?xml version="1.0" ?>

<container xmlns="http://symfony.com/schema/dic/services"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="api_platform.graphql.executor" class="ApiPlatform\Core\GraphQl\Executor" public="false" />

        <!-- Resolvers -->

        <service id="api_platform.graphql.resolver.factory.item" class="ApiPlatform\Core\GraphQl\Resolver\Factory\ItemResolverFactory" public="false">
            <argument type="service" id="api_platform.graphql.resolver.stage.read" />
            <argument type="service" id="api_platform.graphql.resolver.stage.security" />
            <argument type="service" id="api_platform.graphql.resolver.stage.security_post_denormalize" />
            <argument type="service" id="api_platform.graphql.resolver.stage.serialize" />
            <argument type="service" id="api_platform.graphql.query_resolver_locator" />
            <argument type="service" id="api_platform.metadata.resource.metadata_factory" />
        </service>

        <service id="api_platform.graphql.resolver.factory.collection" class="ApiPlatform\Core\GraphQl\Resolver\Factory\CollectionResolverFactory" public="false">
            <argument type="service" id="api_platform.graphql.resolver.stage.read" />
            <argument type="service" id="api_platform.graphql.resolver.stage.security" />
            <argument type="service" id="api_platform.graphql.resolver.stage.security_post_denormalize" />
            <argument type="service" id="api_platform.graphql.resolver.stage.serialize" />
            <argument type="service" id="api_platform.graphql.query_resolver_locator" />
            <argument type="service" id="api_platform.metadata.resource.metadata_factory" />
            <argument type="service" id="request_stack" />
        </service>

        <service id="api_platform.graphql.resolver.factory.item_mutation" class="ApiPlatform\Core\GraphQl\Resolver\Factory\ItemMutationResolverFactory" public="false">
            <argument type="service" id="api_platform.graphql.resolver.stage.read" />
            <argument type="service" id="api_platform.graphql.resolver.stage.security" />
            <argument type="service" id="api_platform.graphql.resolver.stage.security_post_denormalize" />
            <argument type="service" id="api_platform.graphql.resolver.stage.serialize" />
            <argument type="service" id="api_platform.graphql.resolver.stage.deserialize" />
            <argument type="service" id="api_platform.graphql.resolver.stage.write" />
            <argument type="service" id="api_platform.graphql.resolver.stage.validate" />
            <argument type="service" id="api_platform.graphql.mutation_resolver_locator" />
            <argument type="service" id="api_platform.metadata.resource.metadata_factory" />
        </service>

        <!-- Resolver Stages -->

        <service id="api_platform.graphql.resolver.stage.read" class="ApiPlatform\Core\GraphQl\Resolver\Stage\ReadStage" public="false">
            <argument type="service" id="api_platform.metadata.resource.metadata_factory" />
            <argument type="service" id="api_platform.iri_converter" />
            <argument type="service" id="api_platform.collection_data_provider" />
            <argument type="service" id="api_platform.subresource_data_provider" />
            <argument type="service" id="api_platform.graphql.serializer.context_builder" />
        </service>

        <service id="api_platform.graphql.resolver.stage.security" class="ApiPlatform\Core\GraphQl\Resolver\Stage\SecurityStage" public="false">
            <argument type="service" id="api_platform.metadata.resource.metadata_factory" />
            <argument type="service" id="api_platform.security.resource_access_checker" />
        </service>

        <service id="api_platform.graphql.resolver.stage.security_post_denormalize" class="ApiPlatform\Core\GraphQl\Resolver\Stage\SecurityPostDenormalizeStage" public="false">
            <argument type="service" id="api_platform.metadata.resource.metadata_factory" />
            <argument type="service" id="api_platform.security.resource_access_checker" />
        </service>

        <service id="api_platform.graphql.resolver.stage.serialize" class="ApiPlatform\Core\GraphQl\Resolver\Stage\SerializeStage" public="false">
            <argument type="service" id="api_platform.metadata.resource.metadata_factory" />
            <argument type="service" id="serializer" />
            <argument type="service" id="api_platform.graphql.serializer.context_builder" />
            <argument type="service" id="api_platform.pagination" />
        </service>

        <service id="api_platform.graphql.resolver.stage.deserialize" class="ApiPlatform\Core\GraphQl\Resolver\Stage\DeserializeStage" public="false">
            <argument type="service" id="api_platform.metadata.resource.metadata_factory" />
            <argument type="service" id="serializer" />
            <argument type="service" id="api_platform.graphql.serializer.context_builder" />
        </service>

        <service id="api_platform.graphql.resolver.stage.write" class="ApiPlatform\Core\GraphQl\Resolver\Stage\WriteStage" public="false">
            <argument type="service" id="api_platform.metadata.resource.metadata_factory" />
            <argument type="service" id="api_platform.data_persister" />
            <argument type="service" id="api_platform.graphql.serializer.context_builder" />
        </service>

        <service id="api_platform.graphql.resolver.stage.validate" class="ApiPlatform\Core\GraphQl\Resolver\Stage\ValidateStage" public="false">
            <argument type="service" id="api_platform.metadata.resource.metadata_factory" />
            <argument type="service" id="api_platform.validator" />
        </service>

        <service id="api_platform.graphql.resolver.resource_field" class="ApiPlatform\Core\GraphQl\Resolver\ResourceFieldResolver" public="false">
            <argument type="service" id="api_platform.iri_converter" />
        </service>

        <service id="api_platform.graphql.query_resolver_locator" class="Symfony\Component\DependencyInjection\ServiceLocator">
            <tag name="container.service_locator" />
        </service>

        <service id="api_platform.graphql.mutation_resolver_locator" class="Symfony\Component\DependencyInjection\ServiceLocator">
            <tag name="container.service_locator" />
        </service>

        <!-- Type -->

        <service id="api_platform.graphql.iterable_type" class="ApiPlatform\Core\GraphQl\Type\Definition\IterableType">
            <tag name="api_platform.graphql.type" />
        </service>

        <service id="api_platform.graphql.type_locator" class="Symfony\Component\DependencyInjection\ServiceLocator">
            <tag name="container.service_locator" />
        </service>

        <service id="api_platform.graphql.types_container" class="ApiPlatform\Core\GraphQl\Type\TypesContainer" />

        <service id="api_platform.graphql.types_factory" class="ApiPlatform\Core\GraphQl\Type\TypesFactory">
            <argument type="service" id="api_platform.graphql.type_locator" />
        </service>

        <service id="api_platform.graphql.type_converter" class="ApiPlatform\Core\GraphQl\Type\TypeConverter">
            <argument type="service" id="api_platform.graphql.type_builder" />
            <argument type="service" id="api_platform.graphql.types_container" />
            <argument type="service" id="api_platform.metadata.resource.metadata_factory" />
        </service>

        <service id="api_platform.graphql.type_builder" class="ApiPlatform\Core\GraphQl\Type\TypeBuilder" public="false">
            <argument type="service" id="api_platform.graphql.types_container" />
            <argument type="service" id="api_platform.graphql.resolver.resource_field" />
            <argument type="service" id="api_platform.graphql.fields_builder_locator" />
        </service>

        <service id="api_platform.graphql.fields_builder" class="ApiPlatform\Core\GraphQl\Type\FieldsBuilder" public="false">
            <argument type="service" id="api_platform.metadata.property.name_collection_factory" />
            <argument type="service" id="api_platform.metadata.property.metadata_factory" />
            <argument type="service" id="api_platform.metadata.resource.metadata_factory" />
            <argument type="service" id="api_platform.graphql.types_container" />
            <argument type="service" id="api_platform.graphql.type_builder" />
            <argument type="service" id="api_platform.graphql.type_converter" />
            <argument type="service" id="api_platform.graphql.resolver.factory.item" />
            <argument type="service" id="api_platform.graphql.resolver.factory.collection" />
            <argument type="service" id="api_platform.graphql.resolver.factory.item_mutation" />
            <argument type="service" id="api_platform.filter_locator" />
            <argument type="service" id="api_platform.pagination" />
        </service>

        <service id="api_platform.graphql.fields_builder_locator" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
            <argument type="collection">
                <argument type="service" id="api_platform.graphql.fields_builder" />
            </argument>
            <tag name="container.service_locator"/>
        </service>

        <service id="api_platform.graphql.schema_builder" class="ApiPlatform\Core\GraphQl\Type\SchemaBuilder" public="false">
            <argument type="service" id="api_platform.metadata.resource.name_collection_factory" />
            <argument type="service" id="api_platform.metadata.resource.metadata_factory" />
            <argument type="service" id="api_platform.graphql.types_factory" />
            <argument type="service" id="api_platform.graphql.types_container" />
            <argument type="service" id="api_platform.graphql.fields_builder" />
        </service>

        <!-- Action -->

        <service id="api_platform.graphql.action.entrypoint" class="ApiPlatform\Core\GraphQl\Action\EntrypointAction" public="true">
            <argument type="service" id="api_platform.graphql.schema_builder" />
            <argument type="service" id="api_platform.graphql.executor" />
            <argument type="service" id="api_platform.graphql.action.graphiql" />
            <argument type="service" id="api_platform.graphql.action.graphql_playground" />
            <argument>%kernel.debug%</argument>
            <argument>%api_platform.graphql.graphiql.enabled%</argument>
            <argument>%api_platform.graphql.graphql_playground.enabled%</argument>
            <argument>%api_platform.graphql.default_ide%</argument>
        </service>

        <service id="api_platform.graphql.action.graphiql" class="ApiPlatform\Core\GraphQl\Action\GraphiQlAction" public="true">
            <argument type="service" id="twig" />
            <argument type="service" id="api_platform.router" />
            <argument>%api_platform.graphql.graphiql.enabled%</argument>
            <argument>%api_platform.title%</argument>
        </service>

        <service id="api_platform.graphql.action.graphql_playground" class="ApiPlatform\Core\GraphQl\Action\GraphQlPlaygroundAction" public="true">
            <argument type="service" id="twig" />
            <argument type="service" id="api_platform.router" />
            <argument>%api_platform.graphql.graphql_playground.enabled%</argument>
            <argument>%api_platform.title%</argument>
        </service>

        <!-- Serializer -->

        <service id="api_platform.graphql.normalizer.item" class="ApiPlatform\Core\GraphQl\Serializer\ItemNormalizer" public="false">
            <argument type="service" id="api_platform.metadata.property.name_collection_factory" />
            <argument type="service" id="api_platform.metadata.property.metadata_factory" />
            <argument type="service" id="api_platform.iri_converter" />
            <argument type="service" id="api_platform.identifiers_extractor.cached" />
            <argument type="service" id="api_platform.resource_class_resolver" />
            <argument type="service" id="api_platform.property_accessor" />
            <argument type="service" id="api_platform.name_converter" on-invalid="ignore" />
            <argument type="service" id="serializer.mapping.class_metadata_factory" on-invalid="ignore" />
            <argument type="service" id="api_platform.item_data_provider" on-invalid="ignore" />
            <argument>%api_platform.allow_plain_identifiers%</argument>
            <argument>null</argument>
            <argument type="tagged" tag="api_platform.data_transformer" on-invalid="ignore" />
            <argument type="service" id="api_platform.metadata.resource.metadata_factory" on-invalid="ignore" />

            <!-- Run before serializer.normalizer.json_serializable -->
            <tag name="serializer.normalizer" priority="-890" />
        </service>

        <service id="api_platform.graphql.normalizer.object" class="ApiPlatform\Core\GraphQl\Serializer\ObjectNormalizer" public="false">
            <argument type="service" id="serializer.normalizer.object" />
            <argument type="service" id="api_platform.iri_converter" />
            <argument type="service" id="api_platform.identifiers_extractor.cached" />

            <!-- Run after serializer.denormalizer.array but before serializer.normalizer.object -->
            <tag name="serializer.normalizer" priority="-995" />
        </service>

        <service id="api_platform.graphql.serializer.context_builder" class="ApiPlatform\Core\GraphQl\Serializer\SerializerContextBuilder" public="false">
            <argument type="service" id="api_platform.metadata.resource.metadata_factory" />
        </service>
        <service id="ApiPlatform\Core\GraphQl\Serializer\SerializerContextBuilderInterface" alias="api_platform.graphql.serializer.context_builder" />

        <!-- Command -->

        <service id="api_platform.graphql.command.export_command" class="ApiPlatform\Core\Bridge\Symfony\Bundle\Command\GraphQlExportCommand">
            <argument type="service" id="api_platform.graphql.schema_builder" />
            <tag name="console.command" />
        </service>

    </services>

</container>
