parameters:
	level: 5
	paths:
		- src
		- tests
		- tests/Fixtures/app/console
	inferPrivatePropertyTypeFromConstructor: true
	symfony:
		containerXmlPath: tests/Fixtures/app/var/cache/test/AppKernelTestDebugContainer.xml
		constantHassers: false
	doctrine:
		objectManagerLoader: tests/Fixtures/app/object-manager.php
	bootstrapFiles:
		- vendor/bin/.phpunit/phpunit/vendor/autoload.php
		# We're aliasing classes for phpunit in this file, it needs to be added here see phpstan/#2194
		- src/Symfony/Bundle/Test/Constraint/ArraySubset.php
		- tests/Fixtures/app/AppKernel.php
	excludePaths:
		- src/Symfony/Bundle/Command/OpenApiCommand.php
		# Symfony config
		- tests/Fixtures/app/config/config_swagger.php
		# Symfony cache
		- tests/Fixtures/app/var/
		- tests/Fixtures/Symfony/Maker
		# The Symfony Configuration API isn't good enough to be analysed
		- src/Symfony/Bundle/DependencyInjection/Configuration.php
		# Templates for Maker
		- src/Symfony/Maker/Resources/skeleton
		# subtree split
		- src/Doctrine/Orm/Tests/var/*
		- src/Doctrine/Odm/Tests/var/*
		- src/Doctrine/*/vendor/*
		- src/*/vendor/*
		# Symfony 6 support
		- src/OpenApi/Serializer/CacheableSupportsMethodInterface.php
		- src/Serializer/CacheableSupportsMethodInterface.php
		- tests/Hal/Serializer/ItemNormalizerTest.php
		- tests/Symfony/Validator/Metadata/Property/ValidatorPropertyMetadataFactoryTest.php
		- src/Symfony/Bundle/ArgumentResolver/CompatibleValueResolverInterface.php
	earlyTerminatingMethodCalls:
		PHPUnit\Framework\Constraint\Constraint:
			- fail
		ApiPlatform\Metadata\Resource\ResourceMetadataCollection:
			- handleNotFound
	ignoreErrors:
		# False positives
		-   message: '#Call to an undefined method Negotiation\\AcceptHeader::getType\(\).#'
		-
			message: '#but database expects#'
			paths:
				- tests/Fixtures/TestBundle/Entity/
		- '#Cannot call method add\(\) on iterable.#'
		-
			message: '#is never read, only written.#'
			paths:
				- tests/Fixtures/TestBundle/Document/
				- tests/Fixtures/TestBundle/Entity/
				- src/OpenApi/Factory/OpenApiFactory.php
		-
			message: '#is never written, only read.#'
			paths:
				- tests/Fixtures/TestBundle/Document/
				- src/Metadata/Tests/Fixtures/ApiResource/
		-
			message: '#Parameter \#1 \$constraint of method#'
			paths:
				- tests/Symfony/Validator/Metadata/Property/Restriction/
		-
			message: '#expects ApiPlatform\\Metadata\\GraphQl\\Operation\|null, ApiPlatform\\Metadata\\Operation given#'
			paths:
				- src/GraphQl/Tests/Resolver/Factory/
		- '#Access to an undefined property Prophecy\\Prophecy\\ObjectProphecy<(\\?[a-zA-Z0-9_]+)+>::\$[a-zA-Z0-9_]+#'
		# https://github.com/willdurand/Negotiation/issues/89#issuecomment-513283286
		-
			message: '#Call to an undefined method Negotiation\\AcceptHeader::getType\(\)\.#'
			path: src/Symfony/EventListener/AddFormatListener.php
		# https://github.com/phpstan/phpstan-symfony/issues/76
		-
			message: '#Service "test" is not registered in the container\.#'
			path: src/GraphQl/Tests/Type/TypesContainerTest.php

		# Expected, due to optional interfaces
		- '#Method Symfony\\Component\\Serializer\\NameConverter\\NameConverterInterface::denormalize\(\) invoked with (2|3|4) parameters, 1 required\.#'
		- '#Method Symfony\\Component\\Serializer\\NameConverter\\NameConverterInterface::normalize\(\) invoked with (2|3|4) parameters, 1 required\.#'

		# Expected, due to backward compatibility
		-
			message: "#Call to function method_exists\\(\\) with ApiPlatform\\\\JsonApi\\\\Serializer\\\\ItemNormalizer and 'setCircularReferencâ€¦' will always evaluate to false\\.#"
			path: tests/JsonApi/Serializer/ItemNormalizerTest.php
		- '#Method GraphQL\\Type\\Definition\\WrappingType::getWrappedType\(\) invoked with 1 parameter, 0 required\.#'
		- '#Access to an undefined property GraphQL\\Type\\Definition\\NamedType&GraphQL\\Type\\Definition\\Type::\$name\.#'
		# See https://github.com/phpstan/phpstan-symfony/issues/27
		-
			message: '#^Service "[^"]+" is private.$#'
			path: src
		-
			message: '#^Class .+ not found.$#'
			path: src/Elasticsearch/Tests
		# Backward compatibility
		- '#Call to method hasCacheableSupportsMethod\(\) on an unknown class Symfony\\Component\\Serializer\\Normalizer\\CacheableSupportsMethodInterface\.#'
		- '#Class Symfony\\Component\\Serializer\\Normalizer\\CacheableSupportsMethodInterface not found\.#'
		- '#Access to undefined constant Symfony\\Component\\HttpKernel\\HttpKernelInterface::MASTER_REQUEST\.#'
		- '#Attribute class PHPUnit\\Framework\\Attributes\\DataProvider does not exist.#'
