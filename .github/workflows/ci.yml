name: CI

on:
  push:
  pull_request:

env:
  COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  COVERAGE: '0'

jobs:
  php-cs-fixer:
    name: PHP-cs-fixer (PHP ${{ matrix.php }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        php:
          - '8'
      fail-fast: false
    env:
      PHP_CS_FIXER_FUTURE_MODE: '1'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: intl, bcmath, curl, openssl, mbstring 
          ini-values: memory_limit=-1
          tools: pecl, composer, php-cs-fixer
          coverage: none
      - name: Run PHP-CS-Fixer fix
        run: php-cs-fixer fix --dry-run --diff --ansi

  phpstan:
    name: PHPStan (PHP ${{ matrix.php }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        php:
          - '8'
      fail-fast: false
    env:
      APP_DEBUG: '1' # https://github.com/phpstan/phpstan-symfony/issues/37
      SYMFONY_PHPUNIT_VERSION: '9.5'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          tools: pecl, composer
          extensions: intl, bcmath, curl, openssl, mbstring
          coverage: none
          ini-values: memory_limit=-1
      - name: Get composer cache directory
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Update project dependencies
        run: composer update --no-interaction --no-progress --ansi
      - name: Require Symfony components
        run: composer require symfony/intl symfony/uid --dev --no-interaction --no-progress --ansi
      - name: Install PHPUnit
        run: vendor/bin/simple-phpunit --version
      - name: Cache PHPStan results
        uses: actions/cache@v2
        with:
          path: /tmp/phpstan
          key: phpstan-php${{ matrix.php }}-${{ github.sha }}
          restore-keys: |
            phpstan-php${{ matrix.php }}-
            phpstan-
        continue-on-error: true
      - name: Clear test app cache
        run: |
          tests/Fixtures/app/console cache:clear --ansi
      - name: Run PHPStan analysis
        env:
          SYMFONY_PHPUNIT_VERSION: '9.5'
        run: ./vendor/bin/phpstan analyse --no-interaction --no-progress --ansi

  phpunit:
    name: PHPUnit (PHP ${{ matrix.php }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        php:
          - '7.1'
          - '7.2'
          - '7.3'
          - '7.4'
          - '8.0'
        include:
          - php: '8.0'
            coverage: true
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          tools: pecl, composer
          extensions: intl, bcmath, curl, openssl, mbstring, pdo_sqlite
          coverage: pcov
          ini-values: memory_limit=-1
      - name: Get composer cache directory
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Enable code coverage
        if: matrix.coverage
        run: echo "COVERAGE=1" >> $GITHUB_ENV
      - name: Remove Doctrine MongoDB ODM
        if: (startsWith(matrix.php, '7.1'))
        run: |
          composer remove --dev --no-interaction --no-progress --no-update --ansi \
            doctrine/mongodb-odm \
            doctrine/mongodb-odm-bundle \
      - name: Set Composer platform config
        if: (startsWith(matrix.php, '8.0'))
        run: |
            composer config platform.php 7.4.99
      - name: Update project dependencies
        run: composer update --no-interaction --no-progress --ansi
      - name: Require Symfony components
        if: (!startsWith(matrix.php, '7.1'))
        run: composer require symfony/intl symfony/uid --dev --no-interaction --no-progress --ansi
      - name: Install PHPUnit
        run: vendor/bin/simple-phpunit --version
      - name: Clear test app cache
        if: (!startsWith(matrix.php, '8.0'))
        run: tests/Fixtures/app/console cache:clear --ansi
      - name: Clear test app cache (php 8.0)
        if: (startsWith(matrix.php, '8.0'))
        run: rm -Rf tests/Fixtures/app/var/cache/*
      - name: Run PHPUnit tests
        run: |
          mkdir -p build/logs/phpunit
          if [ "$COVERAGE" = '1' ]; then
            vendor/bin/simple-phpunit --coverage-clover build/logs/phpunit/clover.xml --log-junit build/logs/phpunit/junit.xml
          else
            vendor/bin/simple-phpunit --log-junit build/logs/phpunit/junit.xml
          fi
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: phpunit-logs-php${{ matrix.php }}
          path: build/logs/phpunit
        continue-on-error: true
      - name: Upload coverage results to Codecov
        if: matrix.coverage
        uses: codecov/codecov-action@v1
        with:
          name: phpunit-php${{ matrix.php }}
          flags: phpunit
          fail_ci_if_error: true
        continue-on-error: true
      - name: Upload coverage results to Coveralls
        if: matrix.coverage
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          composer global require --prefer-dist --no-interaction --no-progress --ansi cedx/coveralls
          export PATH="$PATH:$HOME/.composer/vendor/bin"
          coveralls build/logs/phpunit/clover.xml
        continue-on-error: true

  behat:
    name: Behat (PHP ${{ matrix.php }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        php:
          - '7.1'
          - '7.2'
          - '7.3'
          - '7.4'
          - '8.0'
        include:
          - php: '8.0'
            coverage: true
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          tools: pecl, composer
          extensions: intl, bcmath, curl, openssl, mbstring, pdo_sqlite
          coverage: pcov
          ini-values: memory_limit=-1
      - name: Set Composer platform config
        if: (startsWith(matrix.php, '8.0'))
        run: |
          composer config platform.php 7.4.99
      - name: Get composer cache directory
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Enable code coverage
        if: matrix.coverage
        run: echo "COVERAGE=1" >> $GITHUB_ENV
      - name: Remove Doctrine MongoDB ODM
        if: startsWith(matrix.php, '7.1')
        run: |
          composer remove --dev --no-interaction --no-progress --no-update --ansi \
            doctrine/mongodb-odm \
            doctrine/mongodb-odm-bundle \
      - name: Update project dependencies
        run: composer update --no-interaction --no-progress --ansi
      - name: Require Symfony components
        if: (!startsWith(matrix.php, '7.1'))
        run: composer require symfony/intl symfony/uid --dev --no-interaction --no-progress --ansi
      - name: Install PHPUnit
        run: vendor/bin/simple-phpunit --version
      - name: Clear test app cache
        if: (!startsWith(matrix.php, '8.0'))
        run: tests/Fixtures/app/console cache:clear --ansi
      - name: Clear test app cache (php 8.0)
        if: (startsWith(matrix.php, '8.0'))
        run: rm -Rf tests/Fixtures/app/var/cache/*
      - name: Run Behat tests
        if: (!startsWith(matrix.php, '8.0'))
        run: |
          mkdir -p build/logs/behat
          if [ "$COVERAGE" = '1' ]; then
            vendor/bin/behat --out=std --format=progress --format=junit --out=build/logs/behat/junit --profile=default-coverage --no-interaction --tags='~@php8'
          else
            if [ "${{ matrix.php }}" = '7.1' ]; then
              vendor/bin/behat --out=std --format=progress --format=junit --out=build/logs/behat/junit --profile=default --no-interaction --tags='~@symfony/uid&&~@php8'
            else
              vendor/bin/behat --out=std --format=progress --format=junit --out=build/logs/behat/junit --profile=default --no-interaction --tags='~@php8'
            fi
          fi
      - name: Run Behat tests
        if: (startsWith(matrix.php, '8.0'))
        run: |
          mkdir -p build/logs/behat
          if [ "$COVERAGE" = '1' ]; then
            vendor/bin/behat --out=std --format=progress --format=junit --out=build/logs/behat/junit --profile=default-coverage --no-interaction
          else
            vendor/bin/behat --out=std --format=progress --format=junit --out=build/logs/behat/junit --profile=default --no-interaction
          fi
      - name: Merge code coverage reports
        if: matrix.coverage
        run: |
          wget -qO /usr/local/bin/phpcov https://phar.phpunit.de/phpcov.phar
          chmod +x /usr/local/bin/phpcov
          phpcov merge --clover build/logs/behat/clover.xml build/coverage
        continue-on-error: true
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: behat-logs-php${{ matrix.php }}
          path: build/logs/behat
        continue-on-error: true
      - name: Upload coverage results to Codecov
        if: matrix.coverage
        uses: codecov/codecov-action@v1
        with:
          name: behat-php${{ matrix.php }}
          flags: behat
          fail_ci_if_error: true
        continue-on-error: true
      - name: Upload coverage results to Coveralls
        if: matrix.coverage
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          composer global require --prefer-dist --no-interaction --no-progress --ansi cedx/coveralls
          export PATH="$PATH:$HOME/.composer/vendor/bin"
          coveralls build/logs/behat/clover.xml
        continue-on-error: true
      - name: Export OpenAPI documents
        run: |
          mkdir -p build/out/openapi
          tests/Fixtures/app/console api:openapi:export --spec-version=2 -o build/out/openapi/swagger_v2.json
          tests/Fixtures/app/console api:openapi:export --spec-version=2 --yaml -o build/out/openapi/swagger_v2.yaml
          tests/Fixtures/app/console api:openapi:export --spec-version=3 -o build/out/openapi/openapi_v3.json
          tests/Fixtures/app/console api:openapi:export --spec-version=3 --yaml -o build/out/openapi/openapi_v3.yaml
      - name: Validate OpenAPI documents
        run: |
            npx swagger-cli validate build/out/openapi/swagger_v2.json
            npx swagger-cli validate build/out/openapi/swagger_v2.yaml
            npx swagger-cli validate build/out/openapi/openapi_v3.json
            npx swagger-cli validate build/out/openapi/openapi_v3.yaml
      - name: Upload OpenAPI artifacts
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: openapi-docs-php${{ matrix.php }}
          path: build/out/openapi
        continue-on-error: true

  phpunit-lowest:
    name: PHPUnit (PHP ${{ matrix.php }} lowest)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        php:
          - '7.4'
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          tools: pecl, composer
          extensions: intl, bcmath, curl, openssl, mbstring 
          coverage: none
          ini-values: memory_limit=-1
      - name: Get composer cache directory
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Update project dependencies
        run: composer update --no-interaction --no-progress --ansi --prefer-lowest
      - name: Require Symfony components
        run: composer require symfony/intl symfony/uid --dev --no-interaction --no-progress --ansi
      - name: Clear test app cache
        run: tests/Fixtures/app/console cache:clear --ansi
      - name: Install PHPUnit
        run: vendor/bin/simple-phpunit --version
      - name: Run PHPUnit tests
        run: vendor/bin/simple-phpunit

  behat-lowest:
    name: Behat (PHP ${{ matrix.php }} lowest)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        php:
          - '7.4'
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          tools: pecl, composer
          extensions: intl, bcmath, curl, openssl, mbstring, pdo_sqlite
          coverage: none
          ini-values: memory_limit=-1
      - name: Get composer cache directory
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Update project dependencies
        run: composer update --no-interaction --no-progress --ansi --prefer-lowest
      - name: Require Symfony components
        run: composer require symfony/intl symfony/uid --dev --no-interaction --no-progress --ansi
      - name: Install PHPUnit
        run: vendor/bin/simple-phpunit --version
      - name: Clear test app cache
        run: tests/Fixtures/app/console cache:clear --ansi
      - name: Run Behat tests
        # @TODO remove the tag "@symfony/uid" in 3.0
        run: vendor/bin/behat --out=std --format=progress --profile=default --no-interaction --tags='~@symfony/uid&&~php8'

  postgresql:
    name: Behat (PHP ${{ matrix.php }}) (PostgreSQL)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        php:
          - '7.4'
      fail-fast: false
    env:
      APP_ENV: postgres
      DATABASE_URL: postgres://api_platform:apiplatformrocks@localhost/api_platform_test
      PGPASSWORD: apiplatformrocks
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup postgres
        run: |
          sudo systemctl start postgresql
          sudo -u postgres psql -d template1 -c "CREATE USER api_platform WITH PASSWORD 'apiplatformrocks' CREATEDB"
          createdb -h localhost -p 5432 -U api_platform api_platform_test
          pg_isready -d api_platform_test -h localhost -p 5432 -U api_platform
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          tools: pecl, composer
          extensions: intl, bcmath, curl, openssl, mbstring, pdo_pgsql
          coverage: none
          ini-values: memory_limit=-1
      - name: Get composer cache directory
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Update project dependencies
        run: composer update --no-interaction --no-progress --ansi
      - name: Require Symfony components
        run: composer require symfony/intl symfony/uid --dev --no-interaction --no-progress --ansi
      - name: Install PHPUnit
        run: vendor/bin/simple-phpunit --version
      - name: Clear test app cache
        run: tests/Fixtures/app/console cache:clear --ansi
      - name: Run Behat tests
        run: | 
          vendor/bin/behat --out=std --format=progress --profile=postgres --no-interaction -vv --tags='~php8'

  mysql:
    name: Behat (PHP ${{ matrix.php }}) (MySQL)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        php:
          - '7.4'
      fail-fast: false
    services:
      mysql:
        image: mariadb:10.5.9
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: api_platform_test
        ports:
          - 3306:3306
    env:
      APP_ENV: mysql
      DATABASE_URL: mysql://root:root@127.0.0.1/api_platform_test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          tools: pecl, composer
          extensions: intl, bcmath, curl, openssl, mbstring, pdo_mysql
          coverage: none
          ini-values: memory_limit=-1
      - name: Get composer cache directory
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Update project dependencies
        run: composer update --no-interaction --no-progress --ansi
      - name: Require Symfony components
        run: composer require symfony/intl symfony/uid --dev --no-interaction --no-progress --ansi
      - name: Install PHPUnit
        run: vendor/bin/simple-phpunit --version
      - name: Clear test app cache
        run: tests/Fixtures/app/console cache:clear --ansi
      - name: Run Behat tests
        run: vendor/bin/behat --out=std --format=progress --profile=default --no-interaction --tags '~@!mysql'

  mongodb:
    name: PHPUnit + Behat (PHP ${{ matrix.php }}) (MongoDB)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        php:
          - '8'
      fail-fast: false
    env:
      APP_ENV: mongodb
      MONGODB_URL: mongodb://localhost:27017
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Check
        run: |
          sudo systemctl start mongod.service
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          tools: pecl, composer
          extensions: intl, bcmath, curl, openssl, mbstring, mongodb
          coverage: none
          ini-values: memory_limit=-1
      - name: Get composer cache directory
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Update project dependencies
        run: |
          composer update --no-interaction --no-progress --ansi
      - name: Require Symfony components
        run: composer require symfony/intl symfony/uid --dev --no-interaction --no-progress --ansi
      - name: Install PHPUnit
        run: vendor/bin/simple-phpunit --version
      - name: Clear test app cache
        run: tests/Fixtures/app/console cache:clear --ansi
      - name: Run PHPUnit tests
        run: vendor/bin/simple-phpunit --group mongodb
      - name: Run Behat tests
        run: vendor/bin/behat -vv --out=std --format=progress --profile=mongodb --no-interaction

  elasticsearch:
    name: Behat (PHP ${{ matrix.php }}) (Elasticsearch)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        php:
          - '7.4'
      fail-fast: false
    env:
      APP_ENV: elasticsearch
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure sysctl limits
        run: |
          sudo swapoff -a
          sudo sysctl -w vm.swappiness=1
          sudo sysctl -w fs.file-max=262144
          sudo sysctl -w vm.max_map_count=262144
      - name: Runs Elasticsearch
        uses: elastic/elastic-github-actions/elasticsearch@master
        with:
          stack-version: '6.8-SNAPSHOT'
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          tools: pecl, composer
          extensions: intl, bcmath, curl, openssl, mbstring, mongodb
          coverage: none
          ini-values: memory_limit=-1
      - name: Get composer cache directory
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Update project dependencies
        run: composer update --no-interaction --no-progress --ansi
      - name: Require Symfony components
        run: composer require symfony/intl symfony/uid --dev --no-interaction --no-progress --ansi
      - name: Install Elasticsearch-php # there is a version matrix for this package: https://packagist.org/packages/elasticsearch/elasticsearch
        run: composer require "elasticsearch/elasticsearch:v6.7.2" --no-interaction --no-progress --ansi
      - name: Install PHPUnit
        run: vendor/bin/simple-phpunit --version
      - name: Clear test app cache
        run: tests/Fixtures/app/console cache:clear --ansi
      - name: Run Behat tests
        run: vendor/bin/behat --out=std --format=progress --profile=elasticsearch --no-interaction

  phpunit-no-deprecations:
    name: PHPUnit (PHP ${{ matrix.php }}) (no deprecations)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        php:
          - '7.4'
      fail-fast: false
    env:
      SYMFONY_DEPRECATIONS_HELPER: max[total]=0
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          tools: pecl, composer
          extensions: intl, bcmath, curl, openssl, mbstring 
          coverage: none
          ini-values: memory_limit=-1
      - name: Get composer cache directory
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Update project dependencies
        run: composer update --no-interaction --no-progress --ansi
      - name: Require Symfony components
        run: composer require symfony/intl symfony/uid --dev --no-interaction --no-progress --ansi
      - name: Install PHPUnit
        run: vendor/bin/simple-phpunit --version
      - name: Clear test app cache
        run: tests/Fixtures/app/console cache:clear --ansi
      - name: Run PHPUnit tests
        run: vendor/bin/simple-phpunit

  phpunit-symfony-next:
    name: PHPUnit (PHP ${{ matrix.php }}) (Symfony ${{ matrix.symfony }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        php:
          - '8.0'
        symfony:
          - '5.3'
      fail-fast: false
    env:
      SYMFONY_DEPRECATIONS_HELPER: max[direct]=0
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
          tools: pecl, composer
          extensions: intl, bcmath, curl, openssl, mbstring 
          coverage: none
          ini-values: memory_limit=-1
      - name: Get composer cache directory
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Allow unstable project dependencies
        run: composer config minimum-stability dev
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Remove cache
        run: rm -Rf tests/Fixtures/app/var/cache/*
      - name: Update project dependencies
        run: composer update --no-interaction --no-progress --ansi
      - name: Require Symfony components
        run: composer require symfony/intl symfony/uid --dev --no-interaction --no-progress --ansi
      - name: Flag held back Symfony packages
        env:
          symfony_version: ${{ matrix.symfony }}
        run: |
          version_pattern=$symfony_version.x-dev
          if [ "${symfony_version%.4}" != "$symfony_version" ]; then
            current_major=${symfony_version%.4}
            next_major=$((current_major + 1))
            version_pattern=$version_pattern'|'$next_major.0.x-dev'|'dev-master
          fi
          version_pattern=$(echo "$version_pattern" | sed -r 's/\./\\./g')
          symfony_packages=$(composer show symfony/* | tr -s ' ' '\t' | cut -f1-2 | grep -vE 'polyfill|contracts|mercure')
          ! echo "$symfony_packages" | grep -vE "$version_pattern"
        continue-on-error: true
      - name: Install PHPUnit
        run: vendor/bin/simple-phpunit --version
      - name: Clear test app cache
        run: tests/Fixtures/app/console cache:clear --ansi
      - name: Run PHPUnit tests
        run: vendor/bin/simple-phpunit

  behat-symfony-next:
    name: Behat (PHP ${{ matrix.php }}) (Symfony ${{ matrix.symfony }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        php:
          - '8.0'
        symfony:
          - '5.3'
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
          tools: pecl, composer
          extensions: intl, bcmath, curl, openssl, mbstring 
          coverage: none
          ini-values: memory_limit=-1
      - name: Install additional packages
        run: sudo apt-get install moreutils 
      - name: Get composer cache directory
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Allow unstable project dependencies
        run: composer config minimum-stability dev
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Remove cache
        run: rm -Rf tests/Fixtures/app/var/cache/*
      - name: Update project dependencies
        run: composer update --no-interaction --no-progress --ansi
      - name: Require Symfony components
        run: composer require symfony/intl symfony/uid --dev --no-interaction --no-progress --ansi
      - name: Flag held back Symfony packages
        env:
          symfony_version: ${{ matrix.symfony }}
        run: |
          version_pattern=$symfony_version.x-dev
          if [ "${symfony_version%.4}" != "$symfony_version" ]; then
            current_major=${symfony_version%.4}
            next_major=$((current_major + 1))
            version_pattern=$version_pattern'|'$next_major.0.x-dev'|'dev-master
          fi
          version_pattern=$(echo "$version_pattern" | sed -r 's/\./\\./g')
          symfony_packages=$(composer show symfony/* | tr -s ' ' '\t' | cut -f1-2 | grep -vE 'polyfill|contracts|mercure')
          ! echo "$symfony_packages" | grep -vE "$version_pattern"
        continue-on-error: true
      - name: Install PHPUnit
        run: vendor/bin/simple-phpunit --version
      - name: Clear test app cache
        run: tests/Fixtures/app/console cache:clear --ansi
      - name: Run Behat tests
        run: vendor/bin/behat --out=std --format=progress --profile=default --no-interaction

  windows-phpunit:
    name: Windows PHPUnit (PHP ${{ matrix.php }}) (SQLite)
    runs-on: windows-latest
    timeout-minutes: 20
    strategy:
      matrix:
        php:
          - '7.4'
          - '8.0'
      fail-fast: false
    env:
      APP_ENV: sqlite
      DATABASE_URL: sqlite:///%kernel.project_dir%/var/data.db
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Setup PHP with pre-release PECL extension
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          tools: pecl, composer
          extensions: intl, bcmath, curl, openssl, mbstring, pdo_sqlite
          coverage: none
          ini-values: memory_limit=-1
      - name: Get composer cache directory
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Set Composer platform config
        if: (startsWith(matrix.php, '8.0'))
        run: |
            composer config platform.php 7.4.99
      - name: Update project dependencies
        run: composer update --no-interaction --no-progress --ansi
      - name: Require Symfony components
        run: composer require symfony/intl symfony/uid --dev --no-interaction --no-progress --ansi
      - name: Install phpunit
        run: vendor/bin/simple-phpunit --version
      - name: Clear test app cache
        run: tests/Fixtures/app/console cache:clear --ansi
      - name: Run PHPUnit tests
        run: vendor/bin/simple-phpunit --log-junit build/logs/phpunit/junit.xml

  windows-behat:
    name: Windows Behat (PHP ${{ matrix.php }}) (SQLite)
    runs-on: windows-latest
    timeout-minutes: 20
    strategy:
      matrix:
        php:
          - '7.4'
          - '8.0'
      fail-fast: false
    env:
      APP_ENV: sqlite
      DATABASE_URL: sqlite:///%kernel.project_dir%/var/data.db
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Setup PHP with pre-release PECL extension
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          tools: pecl, composer
          extensions: intl, bcmath, curl, openssl, mbstring, pdo_sqlite
          coverage: none
          ini-values: memory_limit=-1
      - name: Get composer cache directory
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Set Composer platform config
        if: (startsWith(matrix.php, '8.0'))
        run: |
            composer config platform.php 7.4.99
      - name: Update project dependencies
        run: composer update --no-interaction --no-progress --ansi
      - name: Require Symfony components
        run: composer require symfony/intl symfony/uid --dev --no-interaction --no-progress --ansi
      - name: Install phpunit
        run: vendor/bin/simple-phpunit --version
      - name: Clear test app cache
        run: tests/Fixtures/app/console cache:clear --ansi
      - name: Run Behat tests
        run: |
            if ( "${{ matrix.php }}" -eq '7.4' ) {
                vendor/bin/behat --out=std --format=progress --profile=default --no-interaction --tags='~@php8'
            } else {
                vendor/bin/behat --out=std --format=progress --profile=default --no-interaction 
            }

